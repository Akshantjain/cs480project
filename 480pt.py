# -*- coding: utf-8 -*-
"""480Pt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18Ht2OVKE6PtLms5j7KPESh1ro55GpVjn
"""

#import pymysql
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from datetime import datetime
from math import radians, cos, sin, asin, sqrt, pi
import time

#load sample csv
dataset = pd.read_csv('/content/drive/MyDrive/green_tripdata_2015_6months_cleaned.csv')
dataset

dataset = dataset.sort_values(by = 'lpep_pickup_datetime')
dataset

#count total trips
print('total trips:', len(dataset))

#count total distance/miles driven
print("\u0332".join('Total Distance Travelled:'), dataset['Trip_distance'].sum())

def distance(lat1, lon1, lat2, lon2): 
      
    # The math module contains a function named 
    # radians which converts from degrees to radians. 
    lon1 = radians(lon1) 
    lon2 = radians(lon2) 
    lat1 = radians(lat1) 
    lat2 = radians(lat2) 
       
    # Haversine formula  
    dlon = lon2 - lon1  
    dlat = lat2 - lat1 
  
    return (3956 * 2 * asin(sqrt(sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2)))
     
    # Radius of earth in kilometers. Use 3956 for miles 
    # calculate the result 
    # (c * r) 

def time_difference(time1, time2):
    time_diff = (time2 - time1)
    time_seconds = abs(time_diff.total_seconds())
    
    return time_seconds / 60.0

dataset['lpep_pickup_datetime'] = pd.to_datetime(dataset['lpep_pickup_datetime'])
dataset['Lpep_dropoff_datetime'] = pd.to_datetime(dataset['Lpep_dropoff_datetime'])

dataset["time"]=dataset.Lpep_dropoff_datetime-dataset.lpep_pickup_datetime

dataset["time"] = dataset["time"].apply(lambda x: x.days*24*60*60+x.seconds)  

dataset = dataset[dataset["time"] != 0]

dataset['Average Speed (MPH)'] = dataset.apply(lambda row : row.Trip_distance / (time_difference(row.lpep_pickup_datetime, row.Lpep_dropoff_datetime) / 60.0), axis = 1)

dataset

passenger1_dataset = dataset[dataset.Passenger_count == 1].reset_index(drop=True)
passenger2_dataset = dataset[dataset.Passenger_count == 2].reset_index(drop=True)

passenger1_dataset

passenger2_dataset

dataset1 = dataset[(dataset.lpep_pickup_datetime >= datetime(2015, 1, 1, 0,0,0)) & (dataset.lpep_pickup_datetime <= datetime(2015, 1, 30, 0,5,0))]
dataset1.reset_index(drop=True)

def distanceSaving(d1, d2, D):
  return d1 + d2 - D

def o1o2d1d2(trip1, trip2, delay):
    o1o2 = distance(trip1['Pickup_latitude'], trip1['Pickup_longitude'], trip2['Pickup_latitude'], trip2['Pickup_longitude'])
    o2d1 = distance(trip2['Pickup_latitude'], trip2['Pickup_longitude'], trip1['Dropoff_latitude'], trip1['Dropoff_longitude'])
    d1d2 = distance(trip1['Dropoff_latitude'], trip1['Dropoff_longitude'], trip2['Dropoff_latitude'], trip2['Dropoff_longitude'])

    o2o1 = distance(trip2['Pickup_latitude'], trip2['Pickup_longitude'], trip1['Pickup_latitude'], trip1['Pickup_longitude'])
    o2d2 = distance(trip2['Pickup_latitude'], trip2['Pickup_longitude'], trip2['Dropoff_latitude'], trip2['Dropoff_longitude'])
    d2d1 = distance(trip2['Dropoff_latitude'], trip2['Dropoff_longitude'] ,trip1['Dropoff_latitude'], trip1['Dropoff_longitude'])


    o1d1 = distance(trip1['Pickup_latitude'], trip1['Pickup_longitude'], trip1['Dropoff_latitude'], trip1['Dropoff_longitude'])
    o1d2 = distance(trip1['Pickup_latitude'], trip1['Pickup_longitude'], trip2['Dropoff_latitude'], trip2['Dropoff_longitude'])
    
    dist_array = [o2d1, o2d2, o1d1, o1d2]

    #print("o1o2d: ",o1o2+o2d1+d1d2)
    #print("Trip distance: ",trip1['Trip_distance'] + trip2['Trip_distance'])
    #print(time_difference(trip1['Lpep_dropoff_datetime'], trip2['Lpep_dropoff_datetime']))
    trip_distance = trip1['Trip_distance'] + trip2['Trip_distance']

    if (o1o2 + o2d1 + d1d2 < trip_distance):
        if ( (time_difference(trip1['Lpep_dropoff_datetime'], trip2['Lpep_dropoff_datetime']) < delay) ):
          saving = distanceSaving(trip1['Trip_distance'], trip2['Trip_distance'], (o1o2 + o2d1 + d1d2 ))
          return True, saving
    else:
      return False

    if (o1o2 + o2d2 + d2d1 < trip_distance):
        if ( (time_difference(trip1['Lpep_dropoff_datetime'], trip2['Lpep_dropoff_datetime']) < delay) ):
          saving = distanceSaving(trip1['Trip_distance'], trip2['Trip_distance'], (o1o2 + o2d2 + d2d1 ))
          return True
    else:
      return False

    if (o2o1 + o1d1 + d1d2 < trip_distance):
        if ( (time_difference(trip1['Lpep_dropoff_datetime'], trip2['Lpep_dropoff_datetime']) < delay) ):
          saving = distanceSaving(trip1['Trip_distance'], trip2['Trip_distance'], (o2o1 + o1d1 + d1d2 ))
          return True
    else:
      return False

    if (o2o1 + o1d2 + d2d1 < trip_distance):
        if ( (time_difference(trip1['Lpep_dropoff_datetime'], trip2['Lpep_dropoff_datetime']) < delay) ):
          saving = distanceSaving(trip1['Trip_distance'], trip2['Trip_distance'], (o2o1 + o1d2 + d2d1 ))
          return True
    else:
      return False

  

      
o1o2d1d2(dataset1.iloc[7], dataset1.iloc[0], 5)[1]

#BACKUP
def shared_trips_eval(dataset, delay):
    
    start = time.time()
    rides = []
    mergeable = []
    for index1 in range(len(dataset)):
        print(index1)
        index2 = index1 + 1
        while (index2 < len(dataset)):
          if (dataset.iloc[index1][8] + dataset.iloc[index2][8] <= 3):

            if (o1o2d1d2(dataset.iloc[index1], dataset.iloc[index2], delay)):
              rides.append((dataset.iloc[index1][0], dataset.iloc[index2][0], o1o2d1d2(dataset.iloc[index1], dataset.iloc[index2], delay)[1]))
          index2 = index2+ 1
    
    #for i in range(len(rides)):
     # i2 = i + 1
      #while (i2 < len(rides)):
       # if rides[i][0] == rides[i2][0]:
          #if rides[i][2] > rides[i2][2]:
            #del rides[i2]
        #i2 = i2 + 1

    time.sleep(1)
    end = time.time()
    print(f"Runtime of the program is {end - start}")
    
    return rides
    #

dataset1

def shared_trips_eval(dataset, delay):
    
    start = time.time()
    rides = []
    mergeable = []
    for index1 in range(len(dataset)):
        print(index1)
        index2 = index1 + 1
        while (index2 < len(dataset)):
          if (dataset.iloc[index1][8] + dataset.iloc[index2][8] <= 3):

            if (o1o2d1d2(dataset.iloc[index1], dataset.iloc[index2], delay)):
              rides.append((dataset.iloc[index1][0], dataset.iloc[index2][0], o1o2d1d2(dataset.iloc[index1], dataset.iloc[index2], delay)[1]))
          index2 = index2+ 1
    
    #for i in range(len(rides)):
     # i2 = i + 1
      #while (i2 < len(rides)):
       # if rides[i][0] == rides[i2][0]:
          #if rides[i][2] > rides[i2][2]:
            #del rides[i2]
        #i2 = i2 + 1

    time.sleep(1)
    end = time.time()
    print(f"Runtime of the program is {end - start}")
    
    return rides
    #

dataset1.apply(o1o2d1d2(dataset.iloc[index1], dataset.iloc[index2], delay))

start = time.time()
#for indices in dataset1.itertuples():
for indices in range(len(dataset1)):
  print(indices)


time.sleep(1)
end = time.time()
print(f"Runtime of the program is {end - start}")
  #vals = dataset1.iloc[indices][0]
  #print(vals)

itertuple - 92 sec

d = shared_trips_eval(dataset.head(800), 10)

def removeDuplicates(lst): 
      
    return [t for t in (set(tuple(i) for i in lst))]

def removeDuplicates2(lst): 
      
    return list(filter(lambda x: x[2] < 2.0, lst))

cleaned = (removeDuplicates(d))
cleaned1 = removeDuplicates2(cleaned)

total_distance_saved = 0
for i in range(len(cleaned1)):
  #print(cleaned1[i])
  total_distance_saved += (cleaned1[i][2])

print("miles saved:",total_distance_saved)

100, delay = 5 -   miles saved: 224.84781944559455
100, delay = 10 -  miles saved: 376.0938153061874

1000, delay = 5 -  miles saved: 8793.487880496306
1000, delay = 10 - miles saved: 13238.493834166708





(1343, 1202, 3.211690362110497)
(1343, 813, 2.4622335581418238)
(1343, 1337, 1.2461636790785668)
(989, 1066, 0.8080665303622645)
(1150, 810, 0.5448660685648945)
(1150, 1032, 0.17819001369600063)
(1410, 1260, 8.16336848918447)
(1410, 1196, 4.316777342615181)
(810, 1032, 0.2712198130478032)
(1202, 813, 3.4616681270150114)
(1202, 962, 1.31973741208414)
(1202, 1337, 1.955356073312343)
(813, 962, 0.6418901098188012)
(813, 1337, 3.5848454750830037)
(1260, 1196, 5.80369649549537)
(1067, 993, 0.29607020587376454)
(1168, 1337, 1.740569119499722)
(1697, 1361, 1.6260302145609558)
(1146, 969, 0.19199120374088285)